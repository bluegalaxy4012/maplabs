//    public List<String> getCeaMaiSociabilaComunitate() {
//        Map<Long, List<Long>> graf = buildGraf();
//        Set<Long> visited = new HashSet<>();
//        List<String> celMaiLungDrum = new ArrayList<>();
//        Long drumMaximGlobal = 0L;
//
//        for (Long userId : graf.keySet()) {
//            if (!visited.contains(userId)) {
//                List<String> drumComponenta = drumMaximComponenta(userId, graf, visited);
//                if (drumComponenta.size() > drumMaximGlobal) {
//                    drumMaximGlobal = (long) drumComponenta.size();
//                    celMaiLungDrum = new ArrayList<>(drumComponenta);
//                }
//            }
//        }
//        return celMaiLungDrum;
//    }
//
//    private List<String> drumMaximComponenta(Long nodStart, Map<Long, List<Long>> graf, Set<Long> visited) {
//        Long nodDepartat = dfsDepartat(nodStart, graf, visited, new ArrayList<>());
//        Set<Long> visitedLocal = new HashSet<>();
//        List<String> drumMaxim = new ArrayList<>();
//        dfsDiametru(nodDepartat, graf, visitedLocal, new ArrayList<>(), drumMaxim);
//        return drumMaxim;
//    }
//
//    private Long dfsDepartat(Long nod, Map<Long, List<Long>> graf, Set<Long> visited, List<String> comunitate) {
//        Stack<Long> stack = new Stack<>();
//        Map<Long, Long> dist = new HashMap<>();
//        Long nodDepartat = nod;
//        Long distMax = 0L;
//
//        stack.push(nod);
//        dist.put(nod, 0L);
//        visited.add(nod);
//
//        while (!stack.isEmpty()) {
//            Long current = stack.pop();
//            Long currentDist = dist.get(current);
//
//            if (currentDist > distMax) {
//                distMax = currentDist;
//                nodDepartat = current;
//            }
//
//            for (Long neighbor : graf.get(current)) {
//                if (!visited.contains(neighbor)) {
//                    stack.push(neighbor);
//                    dist.put(neighbor, currentDist + 1);
//                    visited.add(neighbor);
//                }
//            }
//        }
//        return nodDepartat;
//    }
//
//    private void dfsDiametru(Long nod, Map<Long, List<Long>> graf, Set<Long> visited, List<String> drum, List<String> drumMaxim) {
//        visited.add(nod);
//        drum.add(utilizatorRepository.findOne(nod)
//                .map(u -> u.getFirstName() + " " + u.getLastName())
//                .orElseThrow(() -> new ServiceException("Un utilizator nu a putut fi gasit.")));
//
//        if (drum.size() > drumMaxim.size()) {
//            drumMaxim.clear();
//            drumMaxim.addAll(drum);
//        }
//
//        for (Long neighbor : graf.get(nod)) {
//            if (!visited.contains(neighbor)) {
//                dfsDiametru(neighbor, graf, visited, drum, drumMaxim);
//            }
//        }
//
//        drum.remove(drum.size() - 1);
//        visited.remove(nod);
//    }
